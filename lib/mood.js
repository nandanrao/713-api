'use strict';

// mood
var mood = {};
var _ = require('lodash');
var firebase = require('./firebase');
var request = require('request-promise');
var Promise = require('bluebird');
var auth = require('./auth');
var recommender = require('./recommender');

mood.handler = function moodHandler(song, userId) {
  return new Promise(function (resolve, reject) {
    var data = {};
    data[userId] = song.songId;
    firebase.child('moodsongs').update(data, function (err) {
      if (err) reject(err);
      resolve('hooo');
    });
  });
};

mood.getSongInfo = function getSongInfo(songs) {
  return auth.getToken().then(function (token) {
    return Promise.all(songs.map(function (song) {
      return Promise.all([auth.callSpotify('https://api.spotify.com/v1/audio-features/' + song, token), auth.callSpotify('https://api.spotify.com/v1/tracks/' + song, token)]).then(function (arr) {
        return _.merge(arr[0], arr[1]);
      }).then(function (combinedInfo) {
        var artistId = combinedInfo.artists[0].id;
        console.log(artistId);
        return auth.callSpotify('https://api.spotify.com/v1/artists/' + artistId, token).then(function (artist) {
          return _.merge(combinedInfo, { genres: artist.genres });
        });
      });
    }));
  });
};

mood.getPlaylist = function getPlaylist(moodsongs) {
  var clusters = process.env['CLUSTERS'] || 'http://localhost:5000/clusters';

  return mood.getSongInfo(moodsongs).then(function (songs) {
    return request({
      url: clusters,
      method: 'POST',
      body: {
        songs: songs
      },
      json: true
    });
  }).then(function (_ref) {
    var features = _ref.features;
    var artists = _ref.artists;
    return recommender.getSongs(features, artists);
  });
};

firebase.child('moodsongs').on('value', function (snap) {
  var moodsongs = _.values(snap.val());
  console.log('moodsongs', moodsongs);
  mood.onListChange(moodsongs);
});

mood.trimPlaylist = function trimPlaylist(playlist) {
  return playlist.tracks.map(function (track) {
    var start = _.pick(track, ['id', 'name', 'artists', 'duration_ms']);
    start.artist = start.artists.map(function (artist) {
      return artist.name;
    }).join(', ');
    delete start.artists;
    return start;
  });
};

mood.onListChange = function onListChange(moodsongs) {
  mood.getPlaylist(moodsongs).then(function (playlist) {
    var p = mood.trimPlaylist(playlist);
    firebase.child('playlist').set(p);
    firebase.child('pointer').set(p[0]);
  });
};

module.exports = mood;
//# sourceMappingURL=data:application/json;base64,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QUF5QixTQUF6QjtBQUNBLE9BQUssWUFBTCxDQUFrQixTQUFsQjtBQUNELENBSkQ7O0FBTUEsS0FBSyxZQUFMLEdBQW9CLFNBQVMsWUFBVCxDQUF1QixRQUF2QixFQUFpQztBQUNuRCxTQUFPLFNBQVMsTUFBVCxDQUFnQixHQUFoQixDQUFvQixpQkFBUztBQUNsQyxRQUFJLFFBQVEsRUFBRSxJQUFGLENBQU8sS0FBUCxFQUFjLENBQUMsSUFBRCxFQUFPLE1BQVAsRUFBZSxTQUFmLEVBQTBCLGFBQTFCLENBQWQsQ0FBWjtBQUNBLFVBQU0sTUFBTixHQUFlLE1BQU0sT0FBTixDQUFjLEdBQWQsQ0FBa0I7QUFBQSxhQUFVLE9BQU8sSUFBakI7QUFBQSxLQUFsQixFQUF5QyxJQUF6QyxDQUE4QyxJQUE5QyxDQUFmO0FBQ0EsV0FBTyxNQUFNLE9BQWI7QUFDQSxXQUFPLEtBQVA7QUFDRCxHQUxNLENBQVA7QUFNRCxDQVBEOztBQVNBLEtBQUssWUFBTCxHQUFvQixTQUFTLFlBQVQsQ0FBdUIsU0FBdkIsRUFBa0M7QUFDcEQsT0FBSyxXQUFMLENBQWlCLFNBQWpCLEVBQ0csSUFESCxDQUNRLG9CQUFZO0FBQ2hCLFFBQUksSUFBSSxLQUFLLFlBQUwsQ0FBa0IsUUFBbEIsQ0FBUjtBQUNBLGFBQVMsS0FBVCxDQUFlLFVBQWYsRUFBMkIsR0FBM0IsQ0FBK0IsQ0FBL0I7QUFDQSxhQUFTLEtBQVQsQ0FBZSxTQUFmLEVBQTBCLEdBQTFCLENBQThCLEVBQUUsQ0FBRixDQUE5QjtBQUNELEdBTEg7QUFNRCxDQVBEOztBQVNBLE9BQU8sT0FBUCxHQUFpQixJQUFqQiIsImZpbGUiOiJtb29kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbW9vZFxuY29uc3QgbW9vZCA9IHt9O1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBmaXJlYmFzZSA9IHJlcXVpcmUoJy4vZmlyZWJhc2UnKTtcbnZhciByZXF1ZXN0ID0gcmVxdWlyZSgncmVxdWVzdC1wcm9taXNlJyk7XG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG52YXIgYXV0aCA9IHJlcXVpcmUoJy4vYXV0aCcpO1xudmFyIHJlY29tbWVuZGVyID0gcmVxdWlyZSgnLi9yZWNvbW1lbmRlcicpO1xuXG5tb29kLmhhbmRsZXIgPSBmdW5jdGlvbiBtb29kSGFuZGxlciAoc29uZywgdXNlcklkKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdmFyIGRhdGEgPSB7fTtcbiAgICBkYXRhW3VzZXJJZF0gPSBzb25nLnNvbmdJZDtcbiAgICBmaXJlYmFzZS5jaGlsZCgnbW9vZHNvbmdzJykudXBkYXRlKGRhdGEsIGVyciA9PiB7XG4gICAgICBpZiAoZXJyKSByZWplY3QoZXJyKTtcbiAgICAgIHJlc29sdmUoJ2hvb28nKTtcbiAgICB9KVxuICB9KVxufVxuXG5tb29kLmdldFNvbmdJbmZvID0gZnVuY3Rpb24gZ2V0U29uZ0luZm8oc29uZ3MpIHtcbiAgcmV0dXJuIGF1dGguZ2V0VG9rZW4oKVxuICAgIC50aGVuKHRva2VuID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChzb25ncy5tYXAoc29uZyA9PiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgYXV0aC5jYWxsU3BvdGlmeSgnaHR0cHM6Ly9hcGkuc3BvdGlmeS5jb20vdjEvYXVkaW8tZmVhdHVyZXMvJyArIHNvbmcsIHRva2VuKSxcbiAgICAgICAgICBhdXRoLmNhbGxTcG90aWZ5KCdodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MS90cmFja3MvJyArIHNvbmcsIHRva2VuKVxuICAgICAgICBdKVxuICAgICAgICAgIC50aGVuKGFyciA9PiBfLm1lcmdlKGFyclswXSwgYXJyWzFdKSlcbiAgICAgICAgICAudGhlbihjb21iaW5lZEluZm8gPT4ge1xuICAgICAgICAgICAgdmFyIGFydGlzdElkID0gY29tYmluZWRJbmZvLmFydGlzdHNbMF0uaWRcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGFydGlzdElkKVxuICAgICAgICAgICAgcmV0dXJuIGF1dGguY2FsbFNwb3RpZnkoJ2h0dHBzOi8vYXBpLnNwb3RpZnkuY29tL3YxL2FydGlzdHMvJyArIGFydGlzdElkLCB0b2tlbilcbiAgICAgICAgICAgICAgLnRoZW4oYXJ0aXN0ID0+IF8ubWVyZ2UoY29tYmluZWRJbmZvLCB7IGdlbnJlczogYXJ0aXN0LmdlbnJlcyB9KSlcbiAgICAgICAgICB9KVxuICAgICAgfSkpXG4gICAgfSlcbn1cblxubW9vZC5nZXRQbGF5bGlzdCA9IGZ1bmN0aW9uIGdldFBsYXlsaXN0KG1vb2Rzb25ncykge1xuICB2YXIgY2x1c3RlcnMgPSBwcm9jZXNzLmVudlsnQ0xVU1RFUlMnXSB8fCAnaHR0cDovL2xvY2FsaG9zdDo1MDAwL2NsdXN0ZXJzJztcblxuICByZXR1cm4gbW9vZC5nZXRTb25nSW5mbyhtb29kc29uZ3MpXG4gICAgLnRoZW4oc29uZ3MgPT4ge1xuICAgICAgcmV0dXJuIHJlcXVlc3Qoe1xuICAgICAgICB1cmw6IGNsdXN0ZXJzLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keToge1xuICAgICAgICAgIHNvbmdzOiBzb25nc1xuICAgICAgICB9LFxuICAgICAgICBqc29uOiB0cnVlXG4gICAgICB9KVxuICAgIH0pXG4gICAgLnRoZW4oKHtmZWF0dXJlcywgYXJ0aXN0c30pID0+IHJlY29tbWVuZGVyLmdldFNvbmdzKGZlYXR1cmVzLCBhcnRpc3RzKSlcbn1cblxuZmlyZWJhc2UuY2hpbGQoJ21vb2Rzb25ncycpLm9uKCd2YWx1ZScsIHNuYXAgPT4ge1xuICB2YXIgbW9vZHNvbmdzID0gXy52YWx1ZXMoc25hcC52YWwoKSk7XG4gIGNvbnNvbGUubG9nKCdtb29kc29uZ3MnLCBtb29kc29uZ3MpO1xuICBtb29kLm9uTGlzdENoYW5nZShtb29kc29uZ3MpXG59KVxuXG5tb29kLnRyaW1QbGF5bGlzdCA9IGZ1bmN0aW9uIHRyaW1QbGF5bGlzdCAocGxheWxpc3QpIHtcbiAgcmV0dXJuIHBsYXlsaXN0LnRyYWNrcy5tYXAodHJhY2sgPT4ge1xuICAgIHZhciBzdGFydCA9IF8ucGljayh0cmFjaywgWydpZCcsICduYW1lJywgJ2FydGlzdHMnLCAnZHVyYXRpb25fbXMnXSk7XG4gICAgc3RhcnQuYXJ0aXN0ID0gc3RhcnQuYXJ0aXN0cy5tYXAoYXJ0aXN0ID0+IGFydGlzdC5uYW1lKS5qb2luKCcsICcpO1xuICAgIGRlbGV0ZSBzdGFydC5hcnRpc3RzO1xuICAgIHJldHVybiBzdGFydDtcbiAgfSlcbn1cblxubW9vZC5vbkxpc3RDaGFuZ2UgPSBmdW5jdGlvbiBvbkxpc3RDaGFuZ2UgKG1vb2Rzb25ncykge1xuICBtb29kLmdldFBsYXlsaXN0KG1vb2Rzb25ncylcbiAgICAudGhlbihwbGF5bGlzdCA9PiB7XG4gICAgICB2YXIgcCA9IG1vb2QudHJpbVBsYXlsaXN0KHBsYXlsaXN0KVxuICAgICAgZmlyZWJhc2UuY2hpbGQoJ3BsYXlsaXN0Jykuc2V0KHApXG4gICAgICBmaXJlYmFzZS5jaGlsZCgncG9pbnRlcicpLnNldChwWzBdKVxuICAgIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW9vZDtcbiJdfQ==