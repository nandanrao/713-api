'use strict';

// mood
var mood = {};
var _ = require('lodash');
var firebase = require('./firebase');
var request = require('request-promise');
var Promise = require('bluebird');
var auth = require('./auth');
var recommender = require('./recommender');

mood.handler = function moodHandler(song, userId) {
  return new Promise(function (resolve, reject) {
    var data = {};
    data[userId] = song.songId;
    firebase.child('moodsongs').update(data, function (err) {
      if (err) reject(err);
      resolve('hooo');
    });
  });
};

mood.getSongInfo = function getSongInfo(songs) {
  return auth.getToken().then(function (token) {
    return Promise.all(songs.map(function (song) {
      return Promise.all([auth.callSpotify('https://api.spotify.com/v1/audio-features/' + song, token), auth.callSpotify('https://api.spotify.com/v1/tracks/' + song, token)]).then(function (arr) {
        return _.merge(arr[0], arr[1]);
      }).then(function (combinedInfo) {
        var artistId = combinedInfo.artists[0].id;
        return auth.callSpotify('https://api.spotify.com/v1/artists/' + artistId, token).then(function (artist) {
          return _.merge(combinedInfo, { genres: artist.genres });
        });
      });
    }));
  });
};

mood.getPlaylist = function getPlaylist(moodsongs) {
  var clusters = process.env['CLUSTERS'] + '/clusters';

  return mood.getSongInfo(moodsongs).then(function (songs) {
    return request({
      url: clusters,
      method: 'POST',
      body: {
        songs: songs
      },
      json: true
    });
  }).then(function (_ref) {
    var features = _ref.features;
    var artists = _ref.artists;
    return recommender.getSongs(features, artists);
  });
};

firebase.child('moodsongs').on('value', function (snap) {
  var moodsongs = _.values(snap.val());
  mood.onListChange(moodsongs);
});

mood.trimPlaylist = function trimPlaylist(playlist) {
  return playlist.tracks.map(function (track) {
    var start = _.pick(track, ['id', 'name', 'artists', 'duration_ms']);
    start.artist = start.artists.map(function (artist) {
      return artist.name;
    }).join(', ');
    delete start.artists;
    return start;
  });
};

mood.setUserList = function setUserList(userId, userlistId, playlist, token) {
  var list = playlist.map(function (track) {
    return 'spotify:track:' + track.id;
  });

  return auth.callSpotify({
    url: 'https://api.spotify.com/v1/users/' + userId + '/playlists/' + userlistId + '/tracks',
    method: 'PUT',
    body: {
      uris: list
    },
    json: true
  }, token);
};

mood.addPublicList = function addPublicList(user, token) {
  var playlist;

  firebase.child('userlists/' + user.id).once('value', function (snap) {
    if (!snap.val()) {
      auth.callSpotify({
        url: 'https://api.spotify.com/v1/users/' + user.id + '/playlists',
        method: 'POST',
        body: {
          name: 'CPH:713:B',
          public: true
        },
        json: true
      }, token).then(function (_playlist) {
        playlist = _playlist;
        firebase.child('userlists/' + user.id).set(playlist.id);
        firebase.child('playlist').once('value', function (snap) {
          mood.setUserList(user.id, playlist.id, snap.val(), token);
        });
      });
    }
  });
};

firebase.child('playlist').on('value', function (snap) {
  var playlist = snap.val();
  firebase.child('userlists').once('value', function (snap) {
    var userlists = snap.val();
    _.keys(userlists).map(function (userId) {
      var list = userlists[userId];
      firebase.child('tokens/' + userId).once('value', function (snap) {
        var token = snap.val();
        console.log('token from snap ', token, playlist);
        mood.setUserList(userId, list, playlist, token);
      });
    });
  });
});

mood.onListChange = function onListChange(moodsongs) {
  mood.getPlaylist(moodsongs).then(function (playlist) {
    var p = mood.trimPlaylist(playlist);
    console.log('here p');
    firebase.child('playlist').set(p);
    firebase.child('pointer').set(p[0]);
  });
};

module.exports = mood;
//# sourceMappingURL=data:application/json;base64,